source ~/.vimrc

" basic config
set nu
set autoindent
set relativenumber
set hlsearch
set incsearch

" visual 模式下，重复缩进（未生效）
vnoremap > >gv
vnoremap < <gv

" 解决visual选中的情况下只能粘贴一次的问题
vnoremap p P

let mapleader=','

" always use English
set keep-english-in-normal

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

nnoremap n nzzzv
nnoremap N Nzzzv

" inoremap <leader>w <Esc>:w<CR>
" noremap <leader>w <Esc>:w<CR>

inoremap <leader>q <Esc>:q<CR>
noremap <leader>q <Esc>:q<CR>

inoremap <leader>x <Esc>:x<CR>
noremap <leader>x <Esc>:x<CR>

" `^ to next write site
inoremap jj <Esc>`^
inoremap jk <Esc>`^
inoremap kk <Esc>`^

" exchange buffer
nnoremap <silent> [b :bprevious<cr>
nnoremap <silent> [n :bnext<cr>

" syntax highlight
syntax on

" current line mark
set cursorline

" copy to system clipboard
set clipboard+=unnamed

" =============================>, learning lintao
" =============================>, Plugins
set highlightedyank
set surround
set NERDTree

" easymotion
let g:EasyMotion_override_acejump = 0
let g:EasyMotion_do_mapping = 0
set easymotion
" 简单来说easymotion-s使用一个字符作为标签，easymotion-s2 使用两个字符作为标签
nmap ss <Plug>(easymotion-s)
" 启动easymotion s2 当输入两个字符的时候触发
" nmap ss <Plug>(easymotion-s2)

" 2 Basic Setting


" 3 No Leader Keymaps
nmap ge <action>(GotoNextError)
nmap gt <action>(GotoTest)
nmap gm <action>(MethodUp)
nmap gi <action>(GotoImplementation)
nmap gh <action>(QuickJavaDoc)
" last changed in current buffer(file)
nmap ga '.
" nmap p "_dp

" bookmark in whole program
nmap ma <action>(ToggleBookmark)
nmap ms mS
nmap 's 'S
nmap md mD
nmap 'd 'D
nmap mf mF
nmap 'f 'F

nmap L <action>(NextTab)
nmap H <action>(PreviousTab)

" ==============================>, whick key
set which-key
set notimeout

" d: diff
nmap <leader>dd <action>(Vcs.ShowTabbedFileHistory)

" f: Find/Format ⭐️
let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft FindText"
nmap <leader>ft <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Action = "<leader>fa Action"
nmap <leader>fa <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

let g:WhichKeyDesc_Show_GotoSymbol = "<leader>fs GotoSymbol"
nmap <leader>fs <action>(GotoSymbol)

let g:WhichKeyDesc_Show_GotoClass = "<leader>fc GotoClass"
nmap <leader>fc <action>(GotoSymbol)

" g: Git ⭐️
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
nmap <leader>gr :action Vcs.RollbackChangedLines<CR>

let g:WhichKeyDesc_Git_ActivateCommitToolWindow = "<leader>gc ActivateCommitToolWindow"
nmap <leader>gc :action Vcs.ActivateCommitToolWindow<CR>


" i: Insert ⭐️
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>i InsertAfterBrackets"
nmap <leader>i f(a

" j: add Semicolon and goto nextline⭐️
" let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
" nmap <leader>j A;<ESC>o

" l: lsp: Language server protocol (align with neovim)⭐️
" let g:WhichKeyDesc_LSP = "<leader>l LSP"
" let g:WhichKeyDesc_LSP_Rename = "<leader>lr Rename"
" nmap <leader>lr <action>(RenameElement)


" n: No ⭐️
let g:WhichKeyDesc_No_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>


" s: Show ⭐️
let g:WhichKeyDesc_Show = "<leader>s Show"

" let g:WhichKeyDesc_Show_FileStructure = "<leader>ss ShowFileStructure"
nmap <leader>ss <action>(FileStructurePopup)

" let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sb <action>(ShowBookmarks)
" let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sb ShowParameterInfo"
" nmap <leader>sp <action>(ParameterInfo)


" r: Run/Re ⭐️
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
map <leader>rn <action>(RenameElement)

" w: Window ⭐️
let g:WhichKeyDesc_Windows = "<leader>w Windows"

let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)

let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>wl splitWindowVertically"
nmap <leader>wl <action>(SplitVertically)
" nmap <leader>wl <action>(Macro.SplitVertically)

let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc closeActiveWindow"
nmap <leader>wc <c-w>c

" z: zip(fold) ⭐️
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)

" c: Close ⭐️;
let g:WhichKeyDesc_CloseBuffer = "<leader>c CloseBuffer"
nmap <leader>c :q!<CR>

" e: Toggle Explorer ⭐️
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorer"
nmap <leader>e <action>(ActivateProjectToolWindow)

" let g:WhichKeyDesc_ActivateDebugToolWindow = "<leader>e ToggleDebug"
" nmap <leader>ed <action>(ActivateDebugToolWindow)

" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)



"
"
